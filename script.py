import json
import asyncio
import requests
import os

from dotenv import load_dotenv
from aiogram import Bot, Dispatcher, types
from aiogram.enums import ParseMode
from aiogram.types import Message,BotCommand
from aiogram.filters import Command
from aiogram.client.default import DefaultBotProperties

ENV_FILE = "settings.env"
USERS_FILE = "users.json"

# URLs
load_dotenv(ENV_FILE)
api_url = os.getenv("api_url")
api_login_url = os.getenv("api_login_url")


# Device info


jwt_token = os.getenv("jwt_token")  
phone = os.getenv("phone")
device_id = os.getenv("device_id")
bot_token = os.getenv("BOT_TOKEN")
# debug place:

# print(f"ENV TOKEN: {bot_token}")
# print(f"API_Login \n {api_login_url} Api_General \n {api_url}" )
# print(f") 
bot = Bot(token=str(bot_token), default=DefaultBotProperties(parse_mode=ParseMode.HTML))
dp = Dispatcher()

# === –†–∞–±–æ—Ç–∞ —Å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è–º–∏ ===
def load_users():
    try:
        with open(USERS_FILE, "r") as f:
            content = f.read().strip()
            if not content:
                print("‚ö†Ô∏è –ü—É—Å—Ç–æ–π users.json ‚Äî –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –Ω–æ–≤–æ–≥–æ —Å–ª–æ–≤–∞—Ä—è.")
                return {}

            data = json.loads(content)
            if isinstance(data, dict):
                return data
            else:
                print("‚ö†Ô∏è users.json —Å–æ–¥–µ—Ä–∂–∏—Ç —É—Å—Ç–∞—Ä–µ–≤—à–∏–π —Ñ–æ—Ä–º–∞—Ç (—Å–ø–∏—Å–æ–∫). –ü—Ä–µ–æ–±—Ä–∞–∑—É–µ–º.")
                return {str(user_id): "all" for user_id in data}  # –º–∏–≥—Ä–∞—Ü–∏—è –∏–∑ —Å–ø–∏—Å–∫–∞ –≤ —Å–ª–æ–≤–∞—Ä—å

    except FileNotFoundError:
        return {}
    except json.JSONDecodeError as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ —á—Ç–µ–Ω–∏—è users.json: {e}")
        return {}


def save_users(users: dict):
    with open(USERS_FILE, "w") as f:
        json.dump(users, f)

def save_user(chat_id: int, mode="all"):
    users = load_users()
    if not isinstance(users, dict):  # –î–æ–ø. –∑–∞—â–∏—Ç–∞, –µ—Å–ª–∏ –≤–¥—Ä—É–≥ load_users() –∫—Ç–æ-—Ç–æ –æ–±–æ—à—ë–ª
        users = {}
    if str(chat_id) not in users:
        users[str(chat_id)] = mode
        save_users(users)
        print(f"üÜï –ù–æ–≤—ã–π –ø–æ–¥–ø–∏—Å—á–∏–∫: {chat_id} (—Ä–µ–∂–∏–º: {mode})")

async def setup_bot_commands():
    commands = [
        BotCommand(command="start", description="–ü–æ–¥–ø–∏—Å–∞—Ç—å—Å—è –Ω–∞ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è"),
        BotCommand(command="mute", description="–ü–æ–ª—É—á–∞—Ç—å —Ç–æ–ª—å–∫–æ –æ—à–∏–±–∫–∏"),
        BotCommand(command="unmute", description="–ü–æ–ª—É—á–∞—Ç—å –≤—Å–µ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è"),
        BotCommand(command="help", description="–°–ø–∏—Å–æ–∫ –∫–æ–º–∞–Ω–¥"),
    ]
    await bot.set_my_commands(commands)

@dp.message(Command(commands=["subscribe"]))
async def handle_subscribe(message: Message):
    save_user(message.chat.id, mode="all")
    await message.answer("‚úÖ –í—ã –ø–æ–¥–ø–∏—Å–∞–Ω—ã –Ω–∞ –≤—Å–µ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è. –ò—Å–ø–æ–ª—å–∑—É–π /mute, —á—Ç–æ–±—ã –ø–æ–ª—É—á–∞—Ç—å —Ç–æ–ª—å–∫–æ –ø—Ä–æ –æ—à–∏–±–∫–∏.")

@dp.message(Command(commands=["mute"]))
async def handle_mute(message: Message):
    users = load_users()
    users[str(message.chat.id)] = "errors"
    save_users(users)
    await message.answer("üîï –í—ã –±—É–¥–µ—Ç–µ –ø–æ–ª—É—á–∞—Ç—å —Ç–æ–ª—å–∫–æ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –æ–± –æ—à–∏–±–∫–∞—Ö. –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ /unmute —á—Ç–æ –±—ã –ø–æ–ª—É—á–∞—Ç—å –≤—Å–µ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è")

@dp.message(Command(commands=["unmute"]))
async def handle_unmute(message: Message):
    users = load_users()
    users[str(message.chat.id)] = "all"
    save_users(users)
    await message.answer("üîî –í—ã –±—É–¥–µ—Ç–µ –ø–æ–ª—É—á–∞—Ç—å –≤—Å–µ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è. –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ /mute —á—Ç–æ –±—ã –ø–æ–ª—É—á–∞—Ç—å —Ç–æ–ª—å–∫–æ –æ—à–∏–±–∫–∏.")

# === –£–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –≤—Å–µ–º ===
async def notify_all(text: str, is_error=False):
    users = load_users()
    for user_id, mode in users.items():
        if mode == "errors" and not is_error:
            continue  # –ü—Ä–æ–ø—É—Å–∫–∞–µ–º, –µ—Å–ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —Ö–æ—á–µ—Ç —Ç–æ–ª—å–∫–æ –æ—à–∏–±–∫–∏
        try:
            await bot.send_message(user_id, text)
        except Exception as e:
            print(f"‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –æ—Ç–ø—Ä–∞–≤–∏—Ç—å {user_id}: {e}")



# === –ü—Ä–æ–≤–µ—Ä–∫–∞ API ===
async def check_api_status():
    try:
        response = requests.get(api_url)
        response.raise_for_status()
        await notify_all(f"‚úÖ –û–±—â–∏–π API —Ä–∞–±–æ—Ç–∞–µ—Ç: —Å—Ç–∞—Ç—É—Å {response.status_code}")
    except requests.exceptions.RequestException as e:
        await notify_all(f"‚ùå –ü—Ä–æ–±–ª–µ–º–∞ —Å –æ–±—â–∏–º API: {e}", is_error=True)

async def check_login_api():
    headers = {
        "Host": "api.samuapp.com",
        "Cookie": f"jwt={jwt_token}",
        "accept": "application/json, text/plain, */*",
        "content-type": "application/json",
        "user-agent": "SamuApp/1.3 CFNetwork/3826.500.131 Darwin/24.5.0",
        "accept-language": "en-US,en;q=0.9"
    }
    payload = {
        "phone": phone,
        "deviceId": device_id
    }
    try:
        response = requests.post(api_login_url, headers=headers, json=payload)
        status = response.status_code
        if response.ok:
            print(f"‚úÖ –ê–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏—è —Ä–∞–±–æ—Ç–∞–µ—Ç: {status}")
            await notify_all(f"‚úÖ –ê–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏—è —Ä–∞–±–æ—Ç–∞–µ—Ç: —Å—Ç–∞—Ç—É—Å {status}")
        elif status == 401:
            print("üîê JWT —Ç–æ–∫–µ–Ω –ø—Ä–æ—Å—Ä–æ—á–µ–Ω")
        else:
            print(f"‚ùå –û—à–∏–±–∫–∞ –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏: {status}")
            await notify_all(f"‚ùå –û—à–∏–±–∫–∞ –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏: —Å—Ç–∞—Ç—É—Å {status}, –æ—Ç–≤–µ—Ç: {response.text}")
    except Exception as e:
        print(f"üö´ –û—à–∏–±–∫–∞ –∑–∞–ø—Ä–æ—Å–∞ –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏: {e}")
        await notify_all(f"üö´ –û—à–∏–±–∫–∞ –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏: {e}")


# === –¶–∏–∫–ª –ø—Ä–æ–≤–µ—Ä–∫–∏ ===
async def monitor_loop():
    while True:
        await check_api_status()
        await check_login_api()
        await asyncio.sleep(300)  # –ü—Ä–æ–≤–µ—Ä—è—Ç—å –∫–∞–∂–¥—ã–µ 5 –º–∏–Ω—É—Ç


# === –û—Å–Ω–æ–≤–Ω–æ–π –∑–∞–ø—É—Å–∫ ===
async def main():
    # –ó–∞–ø—É—Å–∫–∞–µ–º –∏ –±–æ—Ç–∞, –∏ –ø—Ä–æ–≤–µ—Ä–∫—É API –ø–∞—Ä–∞–ª–ª–µ–ª—å–Ω–æ
    await setup_bot_commands()

    await asyncio.gather(
        dp.start_polling(bot),
        monitor_loop()
    )

if __name__ == "__main__":
    asyncio.run(main())